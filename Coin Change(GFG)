Code Link: https://practice.geeksforgeeks.org/problems/coin-change2448/1

Here we have been asked to solve this problem using dp(Dynamic Programming).This is not the complete code but only the function that we have been asked to solve
But let's see both the approaches(dp and recursion)

Method I: using recursion
time complexity: O(m^n)
--------------------------------------------------------------------------------
def count(self, S, m, n): 
        # code here 
        #Recursive solution
        
        #write all the boundary conditions
        if n==0:
            return 1
        if n<0 or (m<=0 and n>0):
            return 0
        # main recursive step either include the coin or exclude it
        return self.count(S, m-1, n)+self.count(S, m, n-S[m-1])
###############################################################################

Method II: using dp
time complexity: O(m.n)
-------------------------------------------------------------------------------
def count(self, s, m, n):
        dp = [[0 for x in range(m)] for x in range(n+1)] 
        
  
      
        for i in range(m):
            dp[0][i] = 1
      
        # Fill rest of the table entries in bottom up manner
        for i in range(1, n+1): 
            for j in range(m): 
      
                # Count of solutions including S[j] 
                if (i-S[j])>=0:
                    x = dp[i - S[j]][j]
                else:
                    x=0
      
                # Count of solutions excluding S[j] 
                if j>=1:
                    y = dp[i][j-1] 
                else:
                    y=0
      
                # total count 
                dp[i][j] = x + y 
      
        return dp[n][m-1] 
